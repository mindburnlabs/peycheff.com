{"version":3,"file":"middleware.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/external root \" globalThis.__import_unsupported('crypto')\"","webpack://_N_E/./lib/security.ts","webpack://_N_E/./middleware.ts","webpack://_N_E/?3467"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","if(typeof  globalThis.__import_unsupported('crypto') === 'undefined') { var e = new Error(\"Cannot find module ' globalThis.__import_unsupported('crypto')'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }\n\nmodule.exports =  globalThis.__import_unsupported('crypto');","/**\n * Security Utilities for peycheff.com\n * Provides rate limiting, IP validation, and security monitoring\n */\n\n// Rate limiting storage (in production, use Redis or similar)\nconst rateLimitStore = new Map()\nconst securityEventStore = new Map()\n\n// Rate limiting configuration\nexport const RATE_LIMITS = {\n  // API endpoints\n  '/api/contact': {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 5, // 5 requests per 15 minutes\n    skipSuccessfulRequests: false,\n    skipFailedRequests: false\n  },\n  '/api/checkout': {\n    windowMs: 60 * 60 * 1000, // 1 hour\n    maxRequests: 10, // 10 requests per hour\n    skipSuccessfulRequests: false,\n    skipFailedRequests: false\n  },\n  '/api/analytics': {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 100, // 100 requests per minute\n    skipSuccessfulRequests: false,\n    skipFailedRequests: false\n  },\n  '/api/whop': {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 20, // 20 webhooks per minute\n    skipSuccessfulRequests: false,\n    skipFailedRequests: false\n  },\n  // Default rate limit for all other API endpoints\n  'default': {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 100, // 100 requests per 15 minutes\n    skipSuccessfulRequests: false,\n    skipFailedRequests: false\n  }\n}\n\n// Security event types\nexport const SECURITY_EVENTS = {\n  RATE_LIMIT_EXCEEDED: 'rate_limit_exceeded',\n  SUSPICIOUS_REQUEST: 'suspicious_request',\n  INVALID_WEBHOOK_SIGNATURE: 'invalid_webhook_signature',\n  UNAUTHORIZED_ACCESS: 'unauthorized_access',\n  POTENTIAL_XSS: 'potential_xss',\n  POTENTIAL_SQL_INJECTION: 'potential_sql_injection',\n  ABNORMAL_BEHAVIOR: 'abnormal_behavior',\n  BLOCKED_IP: 'blocked_ip'\n}\n\n// Suspicious patterns to detect\nconst SUSPICIOUS_PATTERNS = [\n  // SQL injection patterns\n  /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|SCRIPT)\\b)/i,\n  /(<script|javascript:|onload=|onerror=)/i,\n  // XSS patterns\n  /(<iframe|<object|<embed|<link|<meta)/i,\n  // Path traversal\n  /(\\.\\.[\\/\\\\])/i,\n  // Command injection\n  /(;|\\||&|\\$\\(|`|wget|curl|nc|netcat)/i,\n  // Common attack payloads\n  /(base64_encode|base64_decode|eval|exec|system|shell_exec|passthru)/i\n]\n\n// Blocked IPs (in production, use a database or Redis)\nconst BLOCKED_IPS = new Set([\n  // Add known malicious IPs here\n])\n\n// Rate limiting middleware\ninterface RateLimitOptions {\n  windowMs?: number;\n  maxRequests?: number;\n  message?: string;\n  skipSuccessfulRequests?: boolean;\n  skipFailedRequests?: boolean;\n}\n\nexport function createRateLimit(options: RateLimitOptions = {}) {\n  const {\n    windowMs = 15 * 60 * 1000, // 15 minutes\n    maxRequests = 100,\n    message = 'Too many requests from this IP, please try again later.',\n    skipSuccessfulRequests = false,\n    skipFailedRequests = false\n  } = options\n\n  return async function rateLimit(req: any) {\n    const ip = getClientIP(req)\n    const key = `rate_limit:${ip}:${req.url}`\n    const now = Date.now()\n\n    // Check if IP is blocked\n    if (BLOCKED_IPS.has(ip)) {\n      return {\n        success: false,\n        error: 'Access denied',\n        statusCode: 403,\n        retryAfter: windowMs\n      }\n    }\n\n    // Get current request count\n    const current = rateLimitStore.get(key) || { count: 0, resetTime: now + windowMs }\n\n    // Reset if window has expired\n    if (now > current.resetTime) {\n      current.count = 0\n      current.resetTime = now + windowMs\n    }\n\n    // Increment count\n    current.count++\n    rateLimitStore.set(key, current)\n\n    // Check if limit exceeded\n    if (current.count > maxRequests) {\n      await logSecurityEvent({\n        type: SECURITY_EVENTS.RATE_LIMIT_EXCEEDED,\n        ip,\n        url: req.url,\n        userAgent: req.headers.get('user-agent'),\n        method: req.method,\n        count: current.count,\n        maxRequests\n      })\n\n      return {\n        success: false,\n        error: message,\n        statusCode: 429,\n        retryAfter: Math.ceil((current.resetTime - now) / 1000)\n      }\n    }\n\n    return {\n      success: true,\n      remaining: Math.max(0, maxRequests - current.count),\n      resetTime: current.resetTime\n    }\n  }\n}\n\n// Get client IP address\nexport function getClientIP(req) {\n  return (\n    req.headers.get('x-forwarded-for')?.split(',')[0] ||\n    req.headers.get('x-real-ip') ||\n    req.headers.get('cf-connecting-ip') ||\n    '127.0.0.1'\n  )\n}\n\n// Validate request for suspicious patterns\nexport function validateRequest(req) {\n  const url = req.url\n  const userAgent = req.headers.get('user-agent') || ''\n  const referer = req.headers.get('referer') || ''\n  const ip = getClientIP(req)\n\n  // Check for suspicious patterns in URL and headers\n  const allContent = [url, userAgent, referer].join(' ')\n\n  for (const pattern of SUSPICIOUS_PATTERNS) {\n    if (pattern.test(allContent)) {\n      logSecurityEvent({\n        type: SECURITY_EVENTS.SUSPICIOUS_REQUEST,\n        ip,\n        url,\n        userAgent,\n        pattern: pattern.source,\n        matched: allContent.match(pattern)?.[0]\n      })\n\n      return {\n        valid: false,\n        reason: 'Suspicious content detected',\n        pattern: pattern.source\n      }\n    }\n  }\n\n  // Check for missing user agent (often bots)\n  if (!userAgent || userAgent.length < 10) {\n    logSecurityEvent({\n      type: SECURITY_EVENTS.SUSPICIOUS_REQUEST,\n      ip,\n      url,\n      userAgent,\n      reason: 'Missing or suspicious user agent'\n    })\n  }\n\n  // Check for abnormal request methods\n  const allowedMethods = ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'HEAD', 'PATCH']\n  if (!allowedMethods.includes(req.method)) {\n    logSecurityEvent({\n      type: SECURITY_EVENTS.SUSPICIOUS_REQUEST,\n      ip,\n      url,\n      method: req.method,\n      reason: 'Unexpected HTTP method'\n    })\n\n    return {\n      valid: false,\n      reason: 'Method not allowed'\n    }\n  }\n\n  return { valid: true }\n}\n\n// Log security events\nexport async function logSecurityEvent(eventData) {\n  const event = {\n    id: `sec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    timestamp: new Date().toISOString(),\n    ...eventData\n  }\n\n  // Store in memory (in production, use a proper logging system)\n  const key = `security_events:${event.type}`\n  const events = securityEventStore.get(key) || []\n  events.push(event)\n\n  // Keep only last 100 events per type\n  if (events.length > 100) {\n    events.shift()\n  }\n\n  securityEventStore.set(key, events)\n\n  // Log to console for development\n  console.warn('🚨 Security Event:', event)\n\n  // In production, you would:\n  // - Send to Sentry/LogRocket\n  // - Store in database\n  // - Send alerts to security team\n  // - Integrate with SIEM systems\n\n  // Auto-block IPs with repeated violations\n  if (event.type === SECURITY_EVENTS.RATE_LIMIT_EXCEEDED) {\n    const recentEvents = events.filter(e =>\n      e.ip === event.ip &&\n      (Date.now() - new Date(e.timestamp).getTime()) < 60000 // Last minute\n    )\n\n    if (recentEvents.length > 5) {\n      BLOCKED_IPS.add(event.ip)\n      console.warn(`🚫 IP ${event.ip} auto-blocked due to repeated violations`)\n\n      // Log block event\n      logSecurityEvent({\n        type: SECURITY_EVENTS.BLOCKED_IP,\n        ip: event.ip,\n        reason: 'Repeated rate limit violations',\n        duration: 3600000 // 1 hour\n      })\n    }\n  }\n\n  return event\n}\n\n// Get security statistics\nexport function getSecurityStats() {\n  const stats = {\n    totalEvents: 0,\n    eventsByType: {},\n    blockedIPs: BLOCKED_IPS.size,\n    rateLimitEntries: rateLimitStore.size,\n    recentActivity: []\n  }\n\n  // Count events by type\n  securityEventStore.forEach((events, key) => {\n    const eventType = key.replace('security_events:', '')\n    stats.eventsByType[eventType] = events.length\n    stats.totalEvents += events.length\n\n    // Get recent activity (last 10 events)\n    events.slice(-10).forEach(event => {\n      stats.recentActivity.push({\n        id: event.id,\n        type: event.type,\n        timestamp: event.timestamp,\n        ip: event.ip\n      })\n    })\n  })\n\n  return stats\n}\n\n// Validate webhook signature (for Whop and other webhooks)\nexport function validateWebhookSignature(payload, signature, secret) {\n  if (!signature || !secret) {\n    logSecurityEvent({\n      type: SECURITY_EVENTS.INVALID_WEBHOOK_SIGNATURE,\n      reason: 'Missing signature or secret',\n      signature: !!signature,\n      secret: !!secret\n    })\n    return false\n  }\n\n  try {\n    const crypto = require('crypto')\n    const expectedSignature = crypto\n      .createHmac('sha256', secret)\n      .update(payload, 'utf8')\n      .digest('hex')\n\n    const isValid = crypto.timingSafeEqual(\n      Buffer.from(signature, 'hex'),\n      Buffer.from(expectedSignature, 'hex')\n    )\n\n    if (!isValid) {\n      logSecurityEvent({\n        type: SECURITY_EVENTS.INVALID_WEBHOOK_SIGNATURE,\n        reason: 'Signature verification failed',\n        providedSignature: signature.substring(0, 20) + '...',\n        expectedSignature: expectedSignature.substring(0, 20) + '...'\n      })\n    }\n\n    return isValid\n  } catch (error) {\n    logSecurityEvent({\n      type: SECURITY_EVENTS.INVALID_WEBHOOK_SIGNATURE,\n      reason: 'Error during signature verification',\n      error: error.message\n    })\n    return false\n  }\n}\n\n// Cleanup old rate limit entries (call this periodically)\nexport function cleanupRateLimitStore() {\n  const now = Date.now()\n  let cleaned = 0\n\n  for (const [key, value] of rateLimitStore.entries()) {\n    if (now > value.resetTime) {\n      rateLimitStore.delete(key)\n      cleaned++\n    }\n  }\n\n  if (cleaned > 0) {\n    console.log(`🧹 Cleaned ${cleaned} expired rate limit entries`)\n  }\n}\n\n// Cleanup old security events (call this periodically)\nexport function cleanupSecurityEvents() {\n  const now = Date.now()\n  const maxAge = 24 * 60 * 60 * 1000 // 24 hours\n  let cleaned = 0\n\n  securityEventStore.forEach((events, key) => {\n    const filteredEvents = events.filter(event =>\n      (now - new Date(event.timestamp).getTime()) < maxAge\n    )\n\n    if (filteredEvents.length !== events.length) {\n      securityEventStore.set(key, filteredEvents)\n      cleaned += events.length - filteredEvents.length\n    }\n  })\n\n  if (cleaned > 0) {\n    console.log(`🧹 Cleaned ${cleaned} old security events`)\n  }\n}\n\n// Initialize cleanup intervals\nif (typeof setInterval !== 'undefined') {\n  // Cleanup rate limits every 5 minutes\n  setInterval(cleanupRateLimitStore, 5 * 60 * 1000)\n\n  // Cleanup security events every hour\n  setInterval(cleanupSecurityEvents, 60 * 60 * 1000)\n}\n\n// Individual exports are already defined above\n\n\n","import { NextRequest, NextResponse } from 'next/server'\nimport { getClientIP, validateRequest, logSecurityEvent, SECURITY_EVENTS } from '@/lib/security'\n\n// Rate limiting for middleware\nconst rateLimitStore = new Map()\n\n// Middleware rate limiting\nfunction middlewareRateLimit(ip: string, limit: number = 100, windowMs: number = 15 * 60 * 1000) {\n  const key = `mw_${ip}`\n  const now = Date.now()\n  const current = rateLimitStore.get(key) || { count: 0, resetTime: now + windowMs }\n\n  if (now > current.resetTime) {\n    current.count = 0\n    current.resetTime = now + windowMs\n  }\n\n  current.count++\n  rateLimitStore.set(key, current)\n\n  if (current.count > limit) {\n    return { allowed: false, retryAfter: Math.ceil((current.resetTime - now) / 1000) }\n  }\n\n  return { allowed: true, remaining: Math.max(0, limit - current.count) }\n}\n\n// Blocked user agents and IPs\nconst BLOCKED_USER_AGENTS = [\n  /bot/i,\n  /crawler/i,\n  /spider/i,\n  /scraper/i,\n  /curl/i,\n  /wget/i,\n  /python/i,\n  /java/i,\n  /go-http-client/i,\n  /node/i,\n  /ruby/i,\n  /php/i,\n  /perl/i,\n]\n\nconst SUSPICIOUS_PATHS = [\n  '/admin',\n  '/wp-admin',\n  '/wp-login',\n  '/phpmyadmin',\n  '/.env',\n  '/config',\n  '/backup',\n  '/test',\n  '/api/v1',\n]\n\nconst ALLOWED_METHODS = ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'HEAD', 'PATCH']\n\nexport async function middleware(request: NextRequest) {\n  const ip = getClientIP(request)\n  const userAgent = request.headers.get('user-agent') || ''\n  const url = request.nextUrl\n  const path = url.pathname\n  const method = request.method\n\n  // Security logging\n  const logSecurity = async (eventType: string, details: any) => {\n    await logSecurityEvent({\n      type: eventType,\n      ip,\n      url: request.url,\n      userAgent,\n      method,\n      ...details\n    })\n  }\n\n  // 1. Request validation\n  const validation = validateRequest(request)\n  if (!validation.valid) {\n    await logSecurity(SECURITY_EVENTS.SUSPICIOUS_REQUEST, {\n      reason: validation.reason,\n      pattern: validation.pattern\n    })\n\n    return new NextResponse('Invalid request', {\n      status: 400,\n      headers: {\n        'Content-Type': 'text/plain',\n        'X-Content-Type-Options': 'nosniff',\n        'X-Frame-Options': 'DENY'\n      }\n    })\n  }\n\n  // 2. Method validation\n  if (!ALLOWED_METHODS.includes(method)) {\n    await logSecurity(SECURITY_EVENTS.SUSPICIOUS_REQUEST, {\n      reason: 'Unexpected HTTP method',\n      method\n    })\n\n    return new NextResponse('Method not allowed', {\n      status: 405,\n      headers: {\n        'Allow': ALLOWED_METHODS.join(', ')\n      }\n    })\n  }\n\n  // 3. User agent validation\n  if (userAgent.length < 10) {\n    await logSecurity(SECURITY_EVENTS.SUSPICIOUS_REQUEST, {\n      reason: 'Missing or suspicious user agent',\n      userAgent\n    })\n  }\n\n  // Block suspicious user agents for certain endpoints\n  if (path.startsWith('/api/') && BLOCKED_USER_AGENTS.some(pattern => pattern.test(userAgent))) {\n    await logSecurity(SECURITY_EVENTS.SUSPICIOUS_REQUEST, {\n      reason: 'Blocked user agent accessing API',\n      userAgent\n    })\n\n    return new NextResponse('Access denied', { status: 403 })\n  }\n\n  // 4. Path validation\n  if (SUSPICIOUS_PATHS.some(suspiciousPath => path.toLowerCase().includes(suspiciousPath.toLowerCase()))) {\n    await logSecurity(SECURITY_EVENTS.SUSPICIOUS_REQUEST, {\n      reason: 'Access to suspicious path',\n      path\n    })\n\n    return new NextResponse('Not found', { status: 404 })\n  }\n\n  // 5. Rate limiting by IP\n  const rateLimitResult = middlewareRateLimit(ip, 1000, 15 * 60 * 1000) // 1000 requests per 15 minutes\n  if (!rateLimitResult.allowed) {\n    await logSecurity(SECURITY_EVENTS.RATE_LIMIT_EXCEEDED, {\n      limit: 1000,\n      window: '15 minutes'\n    })\n\n    return new NextResponse('Too many requests', {\n      status: 429,\n      headers: {\n        'Retry-After': rateLimitResult.retryAfter?.toString() || '900',\n        'X-RateLimit-Limit': '1000',\n        'X-RateLimit-Remaining': '0',\n        'X-RateLimit-Reset': new Date(Date.now() + (rateLimitResult.retryAfter! * 1000)).toISOString()\n      }\n    })\n  }\n\n  // 6. Content-Type validation for POST/PUT requests\n  if (['POST', 'PUT', 'PATCH'].includes(method)) {\n    const contentType = request.headers.get('content-type')\n    const isFormData = contentType?.includes('multipart/form-data')\n    const isJson = contentType?.includes('application/json')\n\n    if (!contentType && path.startsWith('/api/')) {\n      await logSecurity(SECURITY_EVENTS.SUSPICIOUS_REQUEST, {\n        reason: 'Missing Content-Type header for API request',\n        contentType\n      })\n\n      return new NextResponse('Content-Type required', { status: 400 })\n    }\n\n    // Size validation\n    const contentLength = request.headers.get('content-length')\n    if (contentLength && parseInt(contentLength) > 10 * 1024 * 1024) { // 10MB limit\n      await logSecurity(SECURITY_EVENTS.SUSPICIOUS_REQUEST, {\n        reason: 'Request too large',\n        contentLength\n      })\n\n      return new NextResponse('Request too large', { status: 413 })\n    }\n  }\n\n  // 7. Add security headers to response\n  const response = NextResponse.next()\n\n  // Custom security headers\n  response.headers.set('X-Content-Type-Options', 'nosniff')\n  response.headers.set('X-Frame-Options', 'DENY')\n  response.headers.set('X-XSS-Protection', '1; mode=block')\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n  response.headers.set('X-DNS-Prefetch-Control', 'on')\n\n  // Remove server information\n  response.headers.set('Server', '')\n  response.headers.set('X-Powered-By', '')\n\n  // Rate limiting headers\n  response.headers.set('X-RateLimit-Limit', '1000')\n  response.headers.set('X-RateLimit-Remaining', rateLimitResult.remaining?.toString() || '999')\n  response.headers.set('X-RateLimit-Reset', new Date(Date.now() + 15 * 60 * 1000).toISOString())\n\n  // IP and request tracking headers (for debugging)\n  if (process.env.NODE_ENV === 'development') {\n    response.headers.set('X-Client-IP', ip)\n    response.headers.set('X-Request-ID', `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`)\n  }\n\n  return response\n}\n\n// Configure which paths the middleware should run on\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n}","import \"next/dist/server/web/globals\";\nimport { adapter } from \"next/dist/server/web/adapter\";\n// Import the userland code.\nimport * as _mod from \"private-next-root-dir/middleware.ts\";\nconst mod = {\n    ..._mod\n};\nconst handler = mod.middleware || mod.default;\nconst page = \"/middleware\";\nif (typeof handler !== \"function\") {\n    throw new Error(`The Middleware \"${page}\" must export a \\`middleware\\` or a \\`default\\` function`);\n}\nexport default function nHandler(opts) {\n    return adapter({\n        ...opts,\n        page,\n        handler\n    });\n}\n\n//# sourceMappingURL=middleware.js.map"],"names":["module","exports","require","globalThis","__import_unsupported","e","code","rateLimitStore","Map","securityEventStore","SECURITY_EVENTS","RATE_LIMIT_EXCEEDED","SUSPICIOUS_REQUEST","BLOCKED_IP","SUSPICIOUS_PATTERNS","BLOCKED_IPS","Set","getClientIP","req","headers","get","split","logSecurityEvent","eventData","event","id","Date","now","Math","random","toString","substr","timestamp","toISOString","key","type","events","push","length","shift","set","console","warn","recentEvents","filter","ip","getTime","add","reason","duration","setInterval","cleaned","value","entries","resetTime","delete","log","forEach","filteredEvents","BLOCKED_USER_AGENTS","SUSPICIOUS_PATHS","ALLOWED_METHODS","middleware","request","userAgent","path","url","nextUrl","pathname","method","logSecurity","eventType","details","validation","validateRequest","referer","allContent","join","pattern","test","source","matched","match","valid","allowedMethods","includes","NextResponse","status","startsWith","some","suspiciousPath","toLowerCase","rateLimitResult","middlewareRateLimit","limit","windowMs","current","count","allowed","retryAfter","ceil","remaining","max","window","contentType","contentLength","parseInt","response","next","config","matcher","mod","middleware_namespaceObject","handler","default","page","nHandler","opts","adapter","C"],"sourceRoot":""}